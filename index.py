import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes
)
from sqlalchemy import create_engine, Column, Integer, String, Boolean
from sqlalchemy.orm import sessionmaker, declarative_base
import logging
import asyncio
from multimedijnayaSistemaIPo import handle_action_multimedia_i_po, show_multimedia_i_po
from roadHelpSubsections import handle_road_help_voyah, show_road_help_subsections
from serviceGarantySubsections import handle_action_service_garanty, show_service_garanty_subsections
from simCardSubsections import handle_action_simcard, show_simcard_subsections
from sparePartsSubsections import handle_action_spare_parts, show_spare_parts_subsections
from voyahSubsections import handle_action_voyah, show_voyah_subsections
from mainMenu import main_menu_buttons

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
engine = create_engine('sqlite:///users.db')
Base = declarative_base()
SessionLocal = sessionmaker(bind=engine)
session = SessionLocal()

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    first_name = Column(String)
    last_name = Column(String)
    chat_id = Column(Integer, unique=True)
    agreement_status = Column(Boolean, default=False)

Base.metadata.create_all(engine)

# –¢–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
TOKEN = '8016334625:AAGdkO4xslCeNyZHkhhBNfMPqIN148PbPfA'

async def show_main_menu(query_or_update: Update | CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = InlineKeyboardMarkup(main_menu_buttons)
    try:
        await query_or_update.message.reply_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )
    except AttributeError:
        await query_or_update.message.reply_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )

async def request_agreement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."""
    user_id = update.effective_user.id
    current_user = session.query(User).filter_by(chat_id=user_id).first()

    if not current_user or current_user.agreement_status != True:
        privacy_message = "–ü—Ä–æ–¥–æ–ª–∂–∞—è, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –û–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö https://voyah.su/privacy.\n–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ VOYAH, —É –í–∞—Å –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω—ã —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –∫–∞–∫: –∏–º—è, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è."
        keyboard = [[InlineKeyboardButton("–°–æ–≥–ª–∞—à–∞—é—Å—å", callback_data=json.dumps({"s": 'user_agree'})),
                     InlineKeyboardButton("–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å", callback_data=json.dumps({"s": 'user_disagree'}))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(privacy_message, reply_markup=reply_markup)
    else:
        await show_main_menu(update, context)

async def any_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ '/start')."""
    await request_agreement(update, context)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    data = json.loads(query.data)
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    current_user = session.query(User).filter_by(chat_id=user_id).first()
    if data['s'] == "user_agree":  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
        if not current_user:
            new_user = User(first_name=update.effective_user.first_name,
                            last_name=update.effective_user.last_name,
                            chat_id=user_id,
                            agreement_status=True)
            session.add(new_user)
            session.commit()
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user.first_name} ({user_id}) –ø—Ä–∏–Ω—è–ª –ø—Ä–∞–≤–∏–ª–∞.")
        else:
            current_user.agreement_status = True  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏—è
            session.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.first_name} ({user_id}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–≥–ª–∞—Å–∏–µ.")

        await query.answer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!")
        await show_main_menu(query, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    elif data['s'] == "user_disagree":  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è
        if current_user:
            current_user.agreement_status = False  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–∞–∑–∞
            session.commit()
        await query.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ –í–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ —Å–º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã.", show_alert=True)
    elif data['s'] == "app_voyah":
        await show_voyah_subsections(query, context)
    elif data["s"] == "mobile_app":
         await handle_action_voyah(query, data, context, send_message)
    elif data['s'] == "app_multimedijnaya_sistema_i_po":
        await show_multimedia_i_po(query, context)
    elif data["s"] == "multimedia_i_po":
         await handle_action_multimedia_i_po(query, data, context, send_message)
    elif data['s'] == "app_sim_card":
        await show_simcard_subsections(query, context)
    elif data['s'] == "sim_card":
        await handle_action_simcard(query, data, context, send_message)
    elif data['s'] == "app_service_garanty":
        await show_service_garanty_subsections(query, context)
    elif data['s'] == "service_garanty":
        await handle_action_service_garanty(query, data, context, send_message)
    elif data['s'] == "app_spare_parts":
        await show_spare_parts_subsections(query, context)
    elif data['s'] == "spare_parts":
        await handle_action_spare_parts(query, data, context, send_message)
    elif data['s'] == "app_road_help":
        await show_road_help_subsections(query, context)
    elif data['s'] == "road_help":
        await handle_road_help_voyah(query, data, context, send_message)
    elif data["s"] == "cancel":
        reply_markup = InlineKeyboardMarkup(main_menu_buttons)
        await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )
    else:
        reply_markup = InlineKeyboardMarkup(main_menu_buttons)
        await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup)

async def send_message(query: CallbackQuery, message: str, context: ContextTypes.DEFAULT_TYPE, question: str = None):
   if question is not None:
    await query.edit_message_text(text=f"–í–∞—à –≤–æ–ø—Ä–æ—Å: {question}")

   await context.bot.send_message(chat_id=query.message.chat_id, text=message)
   await asyncio.sleep(1)
   await show_main_menu(query, context)

def main():

    app = ApplicationBuilder().token(TOKEN).build()


    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, any_message_handler))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CallbackQueryHandler(button_callback))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
